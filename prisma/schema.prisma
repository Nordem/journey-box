generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
  binaryTargets   = ["rhel-openssl-3.0.x", "native"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String            @id
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userProfile      UserProfile?
  eventPreferences EventPreferences?
  restrictions     Restrictions?
  history          History?
  idealOutcomes    IdealOutcome[]
  calendarEvents   CalendarEvent[]
  deliverables     Deliverable[]
  recentDestinations RecentDestination[]
  userDestinations  UserDestinations[]
  travelAvailability TravelAvailability?
}

model UserProfile {
  id                    String   @id @default(uuid())
  name                  String
  location              String
  currentTravelLocation String?
  languages             String[]
  personalityTraits     String[]   // For traits like Sociable, Introvertido, etc.
  hobbiesAndInterests   String[]   // For interests like Deportes por TV, Actividades deportivas, etc.
  additionalInfo        String?    // For "Algo que quieras agregar"
  nearestAirport        String?
  goals                 String[]   // User's goals and objectives
  phone                 String?    // User's phone number
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String   @unique
}

model EventPreferences {
  id                    String   @id @default(uuid())
  preferredExperiences  String[] // Relajaci칩n, Aventura, etc.
  preferredDestinations String[] // Playa, Monta침a, etc.
  teamBuildingPrefs     TeamBuildingPreferences?
  seasonalPreferences   String[] // Primavera, Verano, etc.
  groupSizePreference   String[] // Individual, Grupo peque침o, etc.
  blockedDates         DateTime[]
  categories           String[] // Event categories preferences
  vibeKeywords        String[] // Keywords describing preferred event vibes
  budget              String?  // Budget preference
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TeamBuildingPreferences {
  id                    String   @id @default(uuid())
  preferredActivities   String[] // Din치micas de grupo, Talleres colaborativos, etc.
  location             String   // "office", "outside", "both"
  duration             String   // "less_than_2h", "half_day", "full_day", "multiple_days"
  suggestions          String?
  eventPreferences     EventPreferences @relation(fields: [eventPreferencesId], references: [id], onDelete: Cascade)
  eventPreferencesId   String   @unique
}

model Restrictions {
  id                             String  @id @default(uuid())
  avoidCrowdedDaytimeConferences Boolean @default(false)
  avoidOverlyFormalNetworking    Boolean @default(false)
  avoidFamilyKidsEvents          Boolean @default(false)
  userId                         String  @unique
  user                           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model History {
  id                   String          @id @default(uuid())
  recentEventsAttended String[]
  userId               String          @unique
  eventFeedback        EventFeedback[]
  user                 User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EventFeedback {
  id        String  @id @default(uuid())
  eventName String
  feedback  String
  historyId String
  history   History @relation(fields: [historyId], references: [id], onDelete: Cascade)
}

model IdealOutcome {
  id          String @id @default(uuid())
  description String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id          String   @id @default(uuid())
  date        DateTime
  status      String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Deliverable {
  id     String   @id @default(uuid())
  title  String
  date   DateTime
  note   String?
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id              String        @id @default(uuid())
  name            String
  location        String?
  city            String?
  state           String?
  country         String        @default("Mexico")
  description     String
  startDate       DateTime?
  endDate         DateTime?
  highlights      String[]
  isHighlight     Boolean       @default(false)
  maxParticipants Int?
  originalPrice   Float?
  finalPrice      Float?
  tripManager     String?
  hotelName       String?
  hotelDescription String?
  hotelAmenities  String[]
  hotelIncludes   String[]
  hotelExcludes   String[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum EventCategory {
  ADVENTURE
  CULTURAL
  NATURE
  URBAN
  BEACH
  MOUNTAIN
  GASTRONOMY
  WELLNESS
}

model UserDestinations {
  id          String   @id @default(uuid())
  country     String
  destination String
  isArkusTrip Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RecentDestination {
  id          String   @id @default(uuid())
  country     String
  destination String
  isArkusTrip Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TravelAvailability {
  id              String   @id @default(uuid())
  currentYear     Boolean  @default(true)
  nextYear        Boolean  @default(true)
  followingYear   Boolean  @default(true)
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
