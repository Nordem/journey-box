generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String            @id
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userProfile      UserProfile?
  eventPreferences EventPreferences?
  restrictions     Restrictions?
  history          History?
  idealOutcomes    IdealOutcome[]
  calendarEvents   CalendarEvent[]
  deliverables     Deliverable[]
}

model UserProfile {
  id                    String   @id @default(uuid())
  name                  String
  location              String
  currentTravelLocation String?
  languages             String[]
  personalityTraits     String[]
  goals                 String[]
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String   @unique
}

model EventPreferences {
  id                 String   @id @default(uuid())
  categories         String[]
  vibeKeywords       String[]
  idealTimeSlots     String[]
  budget             String
  preferredGroupType String[]
  preferredEventSize String[]
  maxDistanceKm      Int
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Restrictions {
  id                             String  @id @default(uuid())
  avoidCrowdedDaytimeConferences Boolean @default(false)
  avoidOverlyFormalNetworking    Boolean @default(false)
  avoidFamilyKidsEvents          Boolean @default(false)
  userId                         String  @unique
  user                           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model History {
  id                   String          @id @default(uuid())
  recentEventsAttended String[]
  userId               String          @unique
  eventFeedback        EventFeedback[]
  user                 User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EventFeedback {
  id        String  @id @default(uuid())
  eventName String
  feedback  String
  historyId String
  history   History @relation(fields: [historyId], references: [id], onDelete: Cascade)
}

model IdealOutcome {
  id          String @id @default(uuid())
  description String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id          String   @id @default(uuid())
  date        DateTime
  status      String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Deliverable {
  id     String   @id @default(uuid())
  title  String
  date   DateTime
  note   String?
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id              String        @id @default(uuid())
  name            String
  activities      String[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  category        EventCategory
  city            String
  country         String        @default("Mexico")
  description     String
  endDate         DateTime
  highlights      String[]
  isHighlight     Boolean       @default(false)
  maxParticipants Int?
  price           Float?
  startDate       DateTime
  state           String?
  date            DateTime?
  location        String?
  music           String[]
}

enum EventCategory {
  ADVENTURE
  CULTURAL
  NATURE
  URBAN
  BEACH
  MOUNTAIN
  GASTRONOMY
  WELLNESS
}
